-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | CoreEnv of TorXakis
--   
--   CoreEnv of TorXakis
@package coreenv
@version 0.1.7.0

module EnvData
type StateNr = Int
data Msg
TXS_CORE_SYSTEM_ERROR :: String -> Msg
[s] :: Msg -> String
TXS_CORE_MODEL_ERROR :: String -> Msg
[s] :: Msg -> String
TXS_CORE_USER_ERROR :: String -> Msg
[s] :: Msg -> String
TXS_CORE_RUNTIME_ERROR :: String -> Msg
[s] :: Msg -> String
TXS_CORE_SYSTEM_WARNING :: String -> Msg
[s] :: Msg -> String
TXS_CORE_MODEL_WARNING :: String -> Msg
[s] :: Msg -> String
TXS_CORE_USER_WARNING :: String -> Msg
[s] :: Msg -> String
TXS_CORE_RUNTIME_WARNING :: String -> Msg
[s] :: Msg -> String
TXS_CORE_SYSTEM_INFO :: String -> Msg
[s] :: Msg -> String
TXS_CORE_MODEL_INFO :: String -> Msg
[s] :: Msg -> String
TXS_CORE_USER_INFO :: String -> Msg
[s] :: Msg -> String
TXS_CORE_RUNTIME_INFO :: String -> Msg
[s] :: Msg -> String
TXS_CORE_RESPONSE :: String -> Msg
[s] :: Msg -> String
TXS_CORE_OK :: String -> Msg
[s] :: Msg -> String
TXS_CORE_NOK :: String -> Msg
[s] :: Msg -> String
TXS_CORE_ANY :: String -> Msg
[s] :: Msg -> String
instance GHC.Show.Show EnvData.Msg
instance GHC.Read.Read EnvData.Msg
instance GHC.Classes.Ord EnvData.Msg
instance GHC.Classes.Eq EnvData.Msg
instance TxsShow.PShow EnvData.Msg


-- | Basic Part of TorXakis Core Environment (Internal State) Data Type
--   Definitions.
module EnvBasic
class (Monad envb) => EnvB envb
newUnid :: EnvB envb => envb Id
putMsgs :: EnvB envb => [Msg] -> envb ()

module ParamCore
type Params = Map String (String, String -> Bool)
data ImpRel
IOCO :: ImpRel
data InputCompletion
ANGELIC :: InputCompletion
initParams :: Params
instance GHC.Show.Show ParamCore.InputCompletion
instance GHC.Read.Read ParamCore.InputCompletion
instance GHC.Classes.Ord ParamCore.InputCompletion
instance GHC.Classes.Eq ParamCore.InputCompletion
instance GHC.Show.Show ParamCore.ImpRel
instance GHC.Read.Read ParamCore.ImpRel
instance GHC.Classes.Ord ParamCore.ImpRel
instance GHC.Classes.Eq ParamCore.ImpRel


-- | This module defines the options that can be passed to TorXakis.
module Config

-- | TorXakis configuration options.
data Config
Config :: Bool -> Map SolverId SolverConfig -> SolverId -> [(ParamName, ParamValue)] -> Config

-- | Log all SMT commands?
[smtLog] :: Config -> Bool

-- | Available solvers that can be chosen from.
[availableSolvers] :: Config -> Map SolverId SolverConfig
[selectedSolver] :: Config -> SolverId
[configuredParameters] :: Config -> [(ParamName, ParamValue)]

-- | Return a <a>CreateProcess</a> according to the selected solver in the
--   configuration.
getProc :: Config -> Maybe CreateProcess

-- | TorXakis default configuration
defaultConfig :: Config
newtype SolverId
SolverId :: String -> SolverId
[solverId] :: SolverId -> String
data SolverConfig
SolverConfig :: FilePath -> [String] -> SolverConfig

-- | Executable name.
[execName] :: SolverConfig -> FilePath

-- | Arguments for to be passed to the smtSolver.
[smtArgs] :: SolverConfig -> [String]
newtype ParamName
ParamName :: String -> ParamName
newtype ParamValue
ParamValue :: String -> ParamValue
changeSolver :: Config -> String -> Config
changeLog :: Config -> Bool -> Config
addSolvers :: Config -> Map SolverId SolverConfig -> Config
setParams :: Config -> [(ParamName, ParamValue)] -> Config

-- | Updates a Map of parameters' values with given list of configured
--   parameter
updateParamVals :: Params -> [(ParamName, ParamValue)] -> Params
updateCfg :: Maybe a -> (Config -> a -> Config) -> Config -> Config
instance GHC.Show.Show Config.Config
instance GHC.Classes.Eq Config.Config
instance GHC.Show.Show Config.ParamValue
instance GHC.Classes.Ord Config.ParamValue
instance GHC.Classes.Eq Config.ParamValue
instance GHC.Show.Show Config.ParamName
instance GHC.Classes.Ord Config.ParamName
instance GHC.Classes.Eq Config.ParamName
instance GHC.Show.Show Config.SolverId
instance GHC.Classes.Ord Config.SolverId
instance GHC.Classes.Eq Config.SolverId
instance GHC.Show.Show Config.SolverConfig
instance GHC.Classes.Eq Config.SolverConfig


-- | TorXakis Core Environment (Internal State) Data Type Definitions.
module EnvCore
type IOC = StateT EnvC IO
data EnvC
EnvC :: Config -> Id -> Params -> CoreState -> EnvC

-- | Core configuration.
[config] :: EnvC -> Config

-- | Last used unique number.
[unid] :: EnvC -> Id
[params] :: EnvC -> Params

-- | State specific information.
[state] :: EnvC -> CoreState
data CoreState
Noning :: CoreState
Initing :: Map String SmtEnv -> TxsDefs -> Sigs VarId -> ([Msg] -> IOC ()) -> CoreState
[smts] :: CoreState -> Map String SmtEnv
[tdefs] :: CoreState -> TxsDefs
[sigs] :: CoreState -> Sigs VarId
[putmsgs] :: CoreState -> [Msg] -> IOC ()
Testing :: Map String SmtEnv -> TxsDefs -> Sigs VarId -> ModelDef -> Maybe MapperDef -> Maybe PurpDef -> (Action -> IOC Action) -> IOC Action -> [(StateNr, Action, StateNr)] -> StateNr -> StateNr -> BTree -> BTree -> [(GoalId, Either BTree PurpVerdict)] -> ([Msg] -> IOC ()) -> CoreState
[smts] :: CoreState -> Map String SmtEnv
[tdefs] :: CoreState -> TxsDefs
[sigs] :: CoreState -> Sigs VarId
[modeldef] :: CoreState -> ModelDef
[mapperdef] :: CoreState -> Maybe MapperDef
[purpdef] :: CoreState -> Maybe PurpDef
[puttow] :: CoreState -> Action -> IOC Action
[getfrow] :: CoreState -> IOC Action
[behtrie] :: CoreState -> [(StateNr, Action, StateNr)]
[inistate] :: CoreState -> StateNr
[curstate] :: CoreState -> StateNr
[modsts] :: CoreState -> BTree
[mapsts] :: CoreState -> BTree
[purpsts] :: CoreState -> [(GoalId, Either BTree PurpVerdict)]
[putmsgs] :: CoreState -> [Msg] -> IOC ()
Simuling :: Map String SmtEnv -> TxsDefs -> Sigs VarId -> ModelDef -> Maybe MapperDef -> (Action -> IOC Action) -> IOC Action -> [(StateNr, Action, StateNr)] -> StateNr -> StateNr -> BTree -> BTree -> ([Msg] -> IOC ()) -> CoreState
[smts] :: CoreState -> Map String SmtEnv
[tdefs] :: CoreState -> TxsDefs
[sigs] :: CoreState -> Sigs VarId
[modeldef] :: CoreState -> ModelDef
[mapperdef] :: CoreState -> Maybe MapperDef
[puttow] :: CoreState -> Action -> IOC Action
[getfrow] :: CoreState -> IOC Action
[behtrie] :: CoreState -> [(StateNr, Action, StateNr)]
[inistate] :: CoreState -> StateNr
[curstate] :: CoreState -> StateNr
[modsts] :: CoreState -> BTree
[mapsts] :: CoreState -> BTree
[putmsgs] :: CoreState -> [Msg] -> IOC ()
Stepping :: Map String SmtEnv -> TxsDefs -> Sigs VarId -> ModelDef -> [(StateNr, Action, StateNr)] -> StateNr -> StateNr -> StateNr -> Map StateNr BTree -> ([Msg] -> IOC ()) -> CoreState
[smts] :: CoreState -> Map String SmtEnv
[tdefs] :: CoreState -> TxsDefs
[sigs] :: CoreState -> Sigs VarId
[modeldef] :: CoreState -> ModelDef
[behtrie] :: CoreState -> [(StateNr, Action, StateNr)]
[inistate] :: CoreState -> StateNr
[curstate] :: CoreState -> StateNr
[maxstate] :: CoreState -> StateNr
[modstss] :: CoreState -> Map StateNr BTree
[putmsgs] :: CoreState -> [Msg] -> IOC ()
getSMT :: String -> IOC SmtEnv
putSMT :: String -> SmtEnv -> IOC ()
getParams :: [String] -> IOC [(String, String)]
setParams :: [(String, String)] -> IOC [(String, String)]
initUnid :: IOC Id
newUnid :: IOC Id
putMsgs :: [Msg] -> IOC ()
modifyCS :: (CoreState -> CoreState) -> IOC ()
putCS :: CoreState -> IOC ()
incUnid :: IOC ()
instance EnvBasic.EnvB EnvCore.IOC
