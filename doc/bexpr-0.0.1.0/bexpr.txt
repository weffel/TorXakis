-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Behaviour Expressions
--   
--   Behaviour Expressions
@package bexpr
@version 0.0.1.0

module ChanId
data ChanId
ChanId :: Name -> Id -> [SortId] -> ChanId
[name] :: ChanId -> Name
[unid] :: ChanId -> Id
[chansorts] :: ChanId -> [SortId]
instance Data.Data.Data ChanId.ChanId
instance Control.DeepSeq.NFData ChanId.ChanId
instance GHC.Generics.Generic ChanId.ChanId
instance GHC.Show.Show ChanId.ChanId
instance GHC.Read.Read ChanId.ChanId
instance GHC.Classes.Ord ChanId.ChanId
instance GHC.Classes.Eq ChanId.ChanId
instance Id.Resettable ChanId.ChanId
instance Id.Identifiable ChanId.ChanId

module ProcId
data ExitSort
NoExit :: ExitSort
Exit :: [SortId] -> ExitSort
Hit :: ExitSort
exitSortIds :: ExitSort -> [SortId]
data ProcId
ProcId :: Name -> Id -> [ChanId] -> [VarId] -> ExitSort -> ProcId
[name] :: ProcId -> Name
[unid] :: ProcId -> Id
[procchans] :: ProcId -> [ChanId]
[procvars] :: ProcId -> [VarId]
[procexit] :: ProcId -> ExitSort
instance Data.Data.Data ProcId.ProcId
instance Control.DeepSeq.NFData ProcId.ProcId
instance GHC.Generics.Generic ProcId.ProcId
instance GHC.Show.Show ProcId.ProcId
instance GHC.Read.Read ProcId.ProcId
instance GHC.Classes.Ord ProcId.ProcId
instance GHC.Classes.Eq ProcId.ProcId
instance Data.Data.Data ProcId.ExitSort
instance Control.DeepSeq.NFData ProcId.ExitSort
instance GHC.Generics.Generic ProcId.ExitSort
instance GHC.Show.Show ProcId.ExitSort
instance GHC.Read.Read ProcId.ExitSort
instance GHC.Classes.Ord ProcId.ExitSort
instance GHC.Classes.Eq ProcId.ExitSort
instance Id.Resettable ProcId.ProcId
instance Id.Identifiable ProcId.ProcId
instance Id.Resettable ProcId.ExitSort
instance Id.Identifiable ProcId.ExitSort

module StatId
data StatId
StatId :: Name -> Id -> ProcId -> StatId
[name] :: StatId -> Name
[unid] :: StatId -> Id
[procid] :: StatId -> ProcId
instance Data.Data.Data StatId.StatId
instance Control.DeepSeq.NFData StatId.StatId
instance GHC.Generics.Generic StatId.StatId
instance GHC.Show.Show StatId.StatId
instance GHC.Read.Read StatId.StatId
instance GHC.Classes.Ord StatId.StatId
instance GHC.Classes.Eq StatId.StatId
instance Id.Resettable StatId.StatId
instance Id.Identifiable StatId.StatId

module VarEnv
type VarEnv v w = Map v (ValExpr w)
type VExpr = ValExpr VarId
type VEnv = VarEnv VarId VarId
type WEnv v = Map v Const


-- | This module introduces definitions related to behaviour expressions.
module BehExprDefs

-- | BExprView: the public view of Behaviour Expression <a>BExpr</a>
data BExprView
ActionPref :: ActOffer -> BExpr -> BExprView
Guard :: VExpr -> BExpr -> BExprView
Choice :: (Set BExpr) -> BExprView
Parallel :: (Set ChanId) -> [BExpr] -> BExprView
Enable :: BExpr -> [ChanOffer] -> BExpr -> BExprView
Disable :: BExpr -> BExpr -> BExprView
Interrupt :: BExpr -> BExpr -> BExprView
ProcInst :: ProcId -> [ChanId] -> [VExpr] -> BExprView
Hide :: (Set ChanId) -> BExpr -> BExprView
ValueEnv :: VEnv -> BExpr -> BExprView
StAut :: StatId -> VEnv -> [Trans] -> BExprView

-- | BExpr: behaviour expression
--   
--   <ol>
--   <li>User can't directly construct BExpr (such that invariants will
--   always hold)</li>
--   <li>User can still pattern match on BExpr using <a>BExprView</a></li>
--   <li>Overhead at run-time is zero. See
--   <a>https://wiki.haskell.org/Performance/Data_types#Newtypes</a></li>
--   </ol>
data BExpr

-- | View on Behaviour Expression
view :: BExpr -> BExprView

-- | ActOffer Offer on multiple channels with constraints
data ActOffer
ActOffer :: Set Offer -> Set VarId -> VExpr -> ActOffer
[offers] :: ActOffer -> Set Offer
[hiddenvars] :: ActOffer -> Set VarId
[constraint] :: ActOffer -> VExpr

-- | Offer Offer on a single channel (with multiple values)
data Offer
Offer :: ChanId -> [ChanOffer] -> Offer
[chanid] :: Offer -> ChanId
[chanoffers] :: Offer -> [ChanOffer]

-- | Channel Offer Offer of a single value
data ChanOffer
Quest :: VarId -> ChanOffer
Exclam :: VExpr -> ChanOffer

-- | symbolic transitions
data Trans
Trans :: StatId -> ActOffer -> VEnv -> StatId -> Trans
[from] :: Trans -> StatId
[actoffer] :: Trans -> ActOffer
[update] :: Trans -> VEnv
[to] :: Trans -> StatId

-- | Equality modulo unique id's. Compare two behavior expressions for
--   equality ignoring the differences in identifiers.
(~~) :: BExpr -> BExpr -> Bool

-- | Create a Stop behaviour expression. The Stop behaviour is equal to
--   dead lock.
stop :: BExpr

-- | Is behaviour expression equal to Stop behaviour?
isStop :: BExpr -> Bool

-- | Create an ActionPrefix behaviour expression.
actionPref :: ActOffer -> BExpr -> BExpr

-- | Create a guard behaviour expression.
guard :: VExpr -> BExpr -> BExpr

-- | Create a choice behaviour expression. A choice combines zero or more
--   behaviour expressions.
choice :: Set BExpr -> BExpr

-- | Create a parallel behaviour expression. The behaviour expressions must
--   synchronize on the given set of channels (and EXIT).
parallel :: Set ChanId -> [BExpr] -> BExpr

-- | Create an enable behaviour expression.
enable :: BExpr -> [ChanOffer] -> BExpr -> BExpr

-- | Create a disable behaviour expression.
disable :: BExpr -> BExpr -> BExpr

-- | Create an interrupt behaviour expression.
interrupt :: BExpr -> BExpr -> BExpr

-- | Create a process instantiation behaviour expression.
procInst :: ProcId -> [ChanId] -> [VExpr] -> BExpr

-- | Create a hide behaviour expression. The given set of channels is
--   hidden for its environment.
hide :: Set ChanId -> BExpr -> BExpr

-- | Create a Value Environment behaviour expression.
valueEnv :: VEnv -> BExpr -> BExpr

-- | Create a State Automaton behaviour expression.
stAut :: StatId -> VEnv -> [Trans] -> BExpr
chanIdExit :: ChanId
chanIdIstep :: ChanId
chanIdQstep :: ChanId
chanIdHit :: ChanId
chanIdMiss :: ChanId
containsEXIT :: Set Offer -> Bool
instance Data.Data.Data BehExprDefs.BExpr
instance Control.DeepSeq.NFData BehExprDefs.BExpr
instance GHC.Generics.Generic BehExprDefs.BExpr
instance GHC.Show.Show BehExprDefs.BExpr
instance GHC.Read.Read BehExprDefs.BExpr
instance GHC.Classes.Ord BehExprDefs.BExpr
instance GHC.Classes.Eq BehExprDefs.BExpr
instance Data.Data.Data BehExprDefs.BExprView
instance Control.DeepSeq.NFData BehExprDefs.BExprView
instance GHC.Generics.Generic BehExprDefs.BExprView
instance GHC.Show.Show BehExprDefs.BExprView
instance GHC.Read.Read BehExprDefs.BExprView
instance GHC.Classes.Ord BehExprDefs.BExprView
instance GHC.Classes.Eq BehExprDefs.BExprView
instance Data.Data.Data BehExprDefs.Trans
instance Control.DeepSeq.NFData BehExprDefs.Trans
instance GHC.Generics.Generic BehExprDefs.Trans
instance GHC.Show.Show BehExprDefs.Trans
instance GHC.Read.Read BehExprDefs.Trans
instance GHC.Classes.Ord BehExprDefs.Trans
instance GHC.Classes.Eq BehExprDefs.Trans
instance Data.Data.Data BehExprDefs.ActOffer
instance Control.DeepSeq.NFData BehExprDefs.ActOffer
instance GHC.Generics.Generic BehExprDefs.ActOffer
instance GHC.Show.Show BehExprDefs.ActOffer
instance GHC.Read.Read BehExprDefs.ActOffer
instance GHC.Classes.Ord BehExprDefs.ActOffer
instance GHC.Classes.Eq BehExprDefs.ActOffer
instance Data.Data.Data BehExprDefs.Offer
instance Control.DeepSeq.NFData BehExprDefs.Offer
instance GHC.Generics.Generic BehExprDefs.Offer
instance GHC.Show.Show BehExprDefs.Offer
instance GHC.Read.Read BehExprDefs.Offer
instance GHC.Classes.Ord BehExprDefs.Offer
instance GHC.Classes.Eq BehExprDefs.Offer
instance Data.Data.Data BehExprDefs.ChanOffer
instance Control.DeepSeq.NFData BehExprDefs.ChanOffer
instance GHC.Generics.Generic BehExprDefs.ChanOffer
instance GHC.Show.Show BehExprDefs.ChanOffer
instance GHC.Read.Read BehExprDefs.ChanOffer
instance GHC.Classes.Ord BehExprDefs.ChanOffer
instance GHC.Classes.Eq BehExprDefs.ChanOffer
instance Id.Resettable BehExprDefs.BExprView
instance Id.Resettable BehExprDefs.BExpr
instance Id.Resettable BehExprDefs.Trans
instance Id.Resettable BehExprDefs.ActOffer
instance Id.Resettable BehExprDefs.Offer
instance Id.Resettable BehExprDefs.ChanOffer
instance SortOf.SortOf BehExprDefs.ChanOffer

module Subst

-- | Expressions that support substitution of variables for expressions.
class Subst e

-- | Substitution function.
subst :: Subst e => VEnv -> Map FuncId (FuncDef VarId) -> e -> e
subst' :: VEnv -> Map FuncId (FuncDef VarId) -> BExprView -> BExpr
instance Subst.Subst e => Subst.Subst [e]
instance (GHC.Classes.Ord e, Subst.Subst e) => Subst.Subst (Data.Set.Internal.Set e)
instance Subst.Subst BehExprDefs.BExpr
instance Subst.Subst BehExprDefs.Offer
instance Subst.Subst BehExprDefs.ChanOffer
instance Subst.Subst VarEnv.VExpr

module Relabel
class Relabel e
relabel :: Relabel e => Map ChanId ChanId -> e -> e
instance Relabel.Relabel BehExprDefs.BExpr
instance Relabel.Relabel BehExprDefs.Offer
instance Relabel.Relabel ChanId.ChanId
instance Relabel.Relabel BehExprDefs.Trans

module ProcDef
data ProcDef
ProcDef :: [ChanId] -> [VarId] -> BExpr -> ProcDef
instance Control.DeepSeq.NFData ProcDef.ProcDef
instance GHC.Generics.Generic ProcDef.ProcDef
instance GHC.Show.Show ProcDef.ProcDef
instance GHC.Read.Read ProcDef.ProcDef
instance GHC.Classes.Ord ProcDef.ProcDef
instance GHC.Classes.Eq ProcDef.ProcDef
instance Id.Resettable ProcDef.ProcDef

module StautDef
translate :: Map FuncId (FuncDef VarId) -> Id -> Id -> Name -> [ChanId] -> [VarId] -> ExitSort -> [StatId] -> [VarId] -> [Trans] -> StatId -> VEnv -> (ProcDef, BExpr)

-- | combine parameters of stautdef, state identifier, and stautdef
--   variables into single parameter list must be consistent with
--   <tt>combineArguments</tt>
combineParameters :: [VarId] -> VarId -> [VarId] -> [VarId]
