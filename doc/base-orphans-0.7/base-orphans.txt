-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Backwards-compatible orphan instances for base
--   
--   <tt>base-orphans</tt> defines orphan instances that mimic instances
--   available in later versions of <tt>base</tt> to a wider (older) range
--   of compilers. <tt>base-orphans</tt> does not export anything except
--   the orphan instances themselves and complements
--   <tt><a>base-compat</a></tt>. See the README for what instances are
--   covered: <a>https://github.com/haskell-compat/base-orphans#readme</a>.
--   See also the <a>what is not covered</a> section.
@package base-orphans
@version 0.7


-- | Exports orphan instances that mimic instances available in later
--   versions of <tt>base</tt>. To use them, simply <tt>import Data.Orphans
--   ()</tt>.
module Data.Orphans
instance GHC.Base.Monoid a => GHC.Base.Monoid (Data.Ord.Down a)
instance GHC.Num.Num a => GHC.Num.Num (Data.Ord.Down a)
instance Data.Semigroup.Semigroup a => Data.Semigroup.Semigroup (Data.Ord.Down a)
instance Data.Data.Data Foreign.Ptr.IntPtr
instance Data.Data.Data Foreign.Ptr.WordPtr
instance GHC.Base.Alternative Control.Applicative.ZipList
instance GHC.Base.Functor Data.Ord.Down
instance GHC.Base.Applicative Data.Ord.Down
instance GHC.Base.Monad Data.Ord.Down
instance GHC.Base.Monoid a => GHC.Base.Monoid (GHC.ST.ST s a)
instance Control.Monad.Fail.MonadFail (GHC.ST.ST s)
instance Data.Semigroup.Semigroup a => Data.Semigroup.Semigroup (GHC.ST.ST s a)
