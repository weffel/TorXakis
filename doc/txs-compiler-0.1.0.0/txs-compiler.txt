-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package txs-compiler
@version 0.1.0.0


-- | Compiler error type and associated functions.
module TorXakis.Compiler.Error

-- | Simple error type.
data Error

-- | Single error.
Error :: ErrorType -> ErrorLoc -> Text -> Error
[_errorType] :: Error -> ErrorType
[_errorLoc] :: Error -> ErrorLoc
[_errorMsg] :: Error -> Text

-- | Multiple errors.
Errors :: [Error] -> Error
errorLoc :: Traversal' Error ErrorLoc
errorMsg :: Traversal' Error Text
errorType :: Traversal' Error ErrorType

-- | Type of errors that can occur when compiling a <tt>TorXakis</tt> model
--   file.
data ErrorType
ParseError :: ErrorType
TypeMismatch :: ErrorType

-- | An entity was not defined.
Undefined :: Entity -> ErrorType

-- | Multiple definitions for the same entity.
MultipleDefinitions :: Entity -> ErrorType

-- | An entity could not be resolved (based on the type information for
--   instance).
Unresolved :: Entity -> ErrorType

-- | An entity has multiple candidates (based on the type information for
--   instance)
Ambiguous :: Entity -> ErrorType

-- | An entity is missing from the declaration.
Missing :: Entity -> ErrorType

-- | No definition found for function or process.
NoDefinition :: ErrorType
InvalidExpression :: ErrorType

-- | An error in the compiler has happened.
CompilerPanic :: ErrorType

-- | Entity to which the error is related.
data Entity
Function :: Entity
Process :: Entity
InitialState :: Entity
State :: Entity
Variable :: Entity
Sort :: Entity
Channel :: Entity

-- | In case an error must be generated from a generic function that cannot
--   have access to the entity type. The error type can be made more
--   specific by the caller of such a generic function (see for instance
--   <tt>getUniqueElement</tt>).
Entity :: Entity

-- | Location of an error.
data ErrorLoc

-- | The error location could not be determined. By adding location to
--   TorXakis core types like <tt>SortId</tt> it is possible to augment the
--   number of places in which errors can be associated to locations.
NoErrorLoc :: ErrorLoc

-- | The error is related to a pre-defined entity.
ErrorPredef :: Text -> ErrorLoc
ErrorLoc :: Int -> Int -> ErrorLoc
[errorLine] :: ErrorLoc -> Int
[errorColumn] :: ErrorLoc -> Int

-- | Entities that have an error location.
class HasErrorLoc l
getErrorLoc :: HasErrorLoc l => l -> ErrorLoc
getErrorLoc :: HasErrorLoc l => l -> ErrorLoc
instance GHC.Show.Show TorXakis.Compiler.Error.Error
instance GHC.Classes.Eq TorXakis.Compiler.Error.Error
instance GHC.Show.Show TorXakis.Compiler.Error.ErrorLoc
instance GHC.Classes.Eq TorXakis.Compiler.Error.ErrorLoc
instance GHC.Show.Show TorXakis.Compiler.Error.ErrorType
instance GHC.Classes.Eq TorXakis.Compiler.Error.ErrorType
instance GHC.Show.Show TorXakis.Compiler.Error.Entity
instance GHC.Classes.Eq TorXakis.Compiler.Error.Entity


-- | Definition for the <a>MapsTo</a> class, and associated operators.
--   
--   A constraint of the form 'MapsTo k v mm' denotes that <tt>mm</tt>
--   contains a map from keys of type <tt>k</tt> to values of type
--   <tt>t</tt>.
module TorXakis.Compiler.MapsTo

-- | <tt>mm</tt> maps keys of type <tt>k</tt> onto values of type
--   <tt>v</tt>. The type <tt>mm</tt> can be thought as a composite map,
--   which contains multiple maps. See <tt>:&amp;</tt> for more details.
class (In (k, v) (Contents mm) ~  'True) => MapsTo k v mm

-- | Lookup a key in the map.
lookup :: (MapsTo k v mm, Ord k, Show k, Typeable k, Typeable v) => k -> mm -> Either Error v

-- | Monadic version of <tt>lookup</tt>.
lookupM :: (MapsTo k v mm, Ord k, Show k, Typeable k, Typeable v) => k -> mm -> CompilerM v

-- | Get the inner map.
innerMap :: MapsTo k v mm => mm -> Map k v

-- | Add a map. The addition is biased towards the new map. If the two maps
--   have the same key, then the value of the right map is discarded, and
--   the value of the left map is kept.
(<.+>) :: (MapsTo k v mm, Ord k) => Map k v -> mm -> mm

-- | Replace the inner map with the given one.
replaceInnerMap :: MapsTo k v mm => mm -> Map k v -> mm

-- | Compute when a type is in a tree.

-- | Type family that represents the contents of a map.

-- | Lookup a key in the map.
lookup :: (MapsTo k v mm, Ord k, Show k, Typeable k, Typeable v) => k -> mm -> Either Error v

-- | Monadic version of <tt>lookup</tt>.
lookupM :: (MapsTo k v mm, Ord k, Show k, Typeable k, Typeable v) => k -> mm -> CompilerM v

-- | Get all the keys of type <tt>k</tt> that are associated to values of
--   type <tt>v</tt> in the given map.
keys :: forall k v mm. MapsTo k v mm => mm -> [k]

-- | Get all the values of type <tt>v</tt> that are associated to keys of
--   type <tt>k</tt> in the given map.
values :: forall k v mm. MapsTo k v mm => mm -> [v]

-- | Get the inner map.
innerMap :: MapsTo k v mm => mm -> Map k v

-- | Combinator for maps.
data a (:&) b
(:&) :: a -> b -> (:&) a b

-- | Add a map. The addition is biased towards the new map. If the two maps
--   have the same key, then the value of the right map is discarded, and
--   the value of the left map is kept.
(<.+>) :: (MapsTo k v mm, Ord k) => Map k v -> mm -> mm
infixl 4 <.+>

-- | Like <tt><a>.+</a></tt> but its left argument is a list instead of a
--   map. Useful when we want to add a list to a composite map.
(<.++>) :: (Ord k, MapsTo k v mm) => [(k, v)] -> mm -> mm
infixr 6 <.++>

-- | Combine a list of key values pairs with an existing map.
(.&) :: (Ord k0) => [(k0, v0)] -> mm -> Map k0 v0 :& mm
infixr 6 .&

-- | Combine lists of key values pairs into a pair of maps.
(.&.) :: (Ord k0, Ord k1) => [(k0, v0)] -> [(k1, v1)] -> Map k0 v0 :& Map k1 v1
infixr 6 .&.

-- | Replace the inner map with the given one.
replaceInnerMap :: MapsTo k v mm => mm -> Map k v -> mm
instance (TorXakis.Compiler.MapsTo.MapsTo k v m0, TorXakis.Compiler.MapsTo.In (k, v) (TorXakis.Compiler.MapsTo.Contents m1) ~ 'GHC.Types.False) => TorXakis.Compiler.MapsTo.PairMapsTo k v m0 m1 'GHC.Types.True 'GHC.Types.False
instance (TorXakis.Compiler.MapsTo.In (k, v) (TorXakis.Compiler.MapsTo.Contents m0) ~ 'GHC.Types.False, TorXakis.Compiler.MapsTo.MapsTo k v m1) => TorXakis.Compiler.MapsTo.PairMapsTo k v m0 m1 'GHC.Types.False 'GHC.Types.True
instance TorXakis.Compiler.MapsTo.PairMapsTo k v m0 m1 inM0 inM1 => TorXakis.Compiler.MapsTo.MapsTo k v (m0 TorXakis.Compiler.MapsTo.:& m1)
instance ((TypeError ...), TorXakis.Compiler.MapsTo.In (k, v) (TorXakis.Compiler.MapsTo.Contents m0) ~ 'GHC.Types.False, TorXakis.Compiler.MapsTo.In (k, v) (TorXakis.Compiler.MapsTo.Contents m1) ~ 'GHC.Types.False, 'GHC.Types.False ~ 'GHC.Types.True) => TorXakis.Compiler.MapsTo.PairMapsTo k v m0 m1 'GHC.Types.False 'GHC.Types.False
instance ((TypeError ...), TorXakis.Compiler.MapsTo.In (k, v) (TorXakis.Compiler.MapsTo.Contents m0) ~ 'GHC.Types.True, TorXakis.Compiler.MapsTo.In (k, v) (TorXakis.Compiler.MapsTo.Contents m1) ~ 'GHC.Types.True) => TorXakis.Compiler.MapsTo.PairMapsTo k v m0 m1 'GHC.Types.True 'GHC.Types.True
instance TorXakis.Compiler.MapsTo.MapsTo k v (Data.Map.Internal.Map k v)


module TorXakis.Parser

-- | TorXakis definitions generated by the parser.
data ParsedDefs
adts :: Lens' ParsedDefs [ADTDecl]
funcs :: Lens' ParsedDefs [FuncDecl]
consts :: Lens' ParsedDefs [FuncDecl]
models :: Lens' ParsedDefs [ModelDecl]
chdecls :: Lens' ParsedDefs [ChanDecl]
procs :: Lens' ParsedDefs [ProcDecl]

-- | Root parser for the TorXakis language.
txsP :: TxsParser ParsedDefs

-- | Parse a TorXakis file from file.
parseFile :: FilePath -> IO (Either Error ParsedDefs)

-- | Parse a TorXakis file from a string.
parseString :: FilePath -> String -> Either Error ParsedDefs

-- | Parse a string using the initial value for the unique id's counter.
parse :: Int -> String -> String -> TxsParser a -> Either Error a


module TorXakis.Compiler

-- | Compile a file into a TorXakis model.
compileFile :: FilePath -> IO (Either Error (Id, TxsDefs, Sigs VarId))

-- | Compile a string into a TorXakis model.
compileString :: String -> IO (Either Error (Id, TxsDefs, Sigs VarId))

-- | Run the compiler throwing an error if the compiler returns an
--   <a>Error</a>.
compileUnsafe :: CompilerM a -> a

-- | Sub-compiler for value definitions
compileValDefs :: Sigs VarId -> [VarId] -> Int -> String -> CompilerM (Id, Map VarId (ValExpr VarId))

-- | Sub-compiler for variable declarations.
compileVarDecls :: Sigs VarId -> Int -> String -> CompilerM (Id, [VarId])

-- | Sub-compiler for value expressions.
compileValExpr :: Sigs VarId -> [VarId] -> Int -> String -> CompilerM (Id, ValExpr VarId)

-- | Sub-compiler for behavior expressions.
compileBExpr :: Sigs VarId -> [ChanId] -> [VarId] -> Int -> String -> CompilerM (Id, BExpr)

-- | Sub-compiler for action prefix offers.
compileOffer :: Sigs VarId -> [ChanId] -> [VarId] -> Int -> String -> CompilerM (Id, Set Offer)

-- | Legacy compile function, used to comply with the old interface. It
--   should be deprecated in favor of <a>compileFile</a>.
compileLegacy :: String -> (Id, TxsDefs, Sigs VarId)
