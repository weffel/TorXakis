-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Behaviour Expressions for TorXakis
--   
--   Behaviour Expressions for TorXakis
@package behavedefs
@version 0.2.1.0

module BTree
type BehAction = Set (ChanId, [Const])
type BTree = [BBranch]
data BBranch
BTpref :: Set CTOffer -> [IVar] -> ValExpr IVar -> INode -> BBranch
[btoffers] :: BBranch -> Set CTOffer
[bthidvars] :: BBranch -> [IVar]
[btpred] :: BBranch -> ValExpr IVar
[btnext] :: BBranch -> INode
BTtau :: BTree -> BBranch
[btree] :: BBranch -> BTree
type CTree = [CTBranch]
data CTBranch
CTpref :: Set CTOffer -> [IVar] -> ValExpr IVar -> INode -> CTBranch
[ctoffers] :: CTBranch -> Set CTOffer
[cthidvars] :: CTBranch -> [IVar]
[ctpred] :: CTBranch -> ValExpr IVar
[ctnext] :: CTBranch -> INode
data CTOffer
CToffer :: ChanId -> [IVar] -> CTOffer
[ctchan] :: CTOffer -> ChanId
[ctchoffers] :: CTOffer -> [IVar]
data BNode env
BNbexpr :: env -> BExpr -> BNode env
BNparallel :: [ChanId] -> [BNode env] -> BNode env
BNenable :: (BNode env) -> [ChanOffer] -> (BNode env) -> BNode env
BNdisable :: (BNode env) -> (BNode env) -> BNode env
BNinterrupt :: (BNode env) -> (BNode env) -> BNode env
BNhide :: [ChanId] -> (BNode env) -> BNode env
type CNode = BNode (WEnv VarId)
type INode = BNode (WEnv VarId, IVEnv)

-- | IVar : interaction variable for behaviour tree
--   
--   An interaction variable is used to combine the communication of
--   different processes over the same channel.
--   
--   The following channel communication:
--   
--   <pre>
--   A ? x ? y ? z
--   </pre>
--   
--   Is associated to the following <a>IVar</a>'s:
--   
--   <pre>
--   IVar "A" uid 1 d sortOf(x)
--   IVar "A" uid 2 d sortOf(y)
--   IVar "A" uid 3 d sortOf(z)
--   </pre>
--   
--   These variables allow to translate communications like:
--   
--   <pre>
--   A ! 6
--   </pre>
--   
--   which gets translated to:
--   
--   <pre>
--   A ? A1 [[ A1 == 6 ]]
--   </pre>
--   
--   where A1 is associated to <a>IVar</a>:
--   
--   <pre>
--   IVar "A" uid 1 d Int
--   </pre>
data IVar
IVar :: Name -> Id -> Int -> Int -> SortId -> IVar
[ivname] :: IVar -> Name
[ivuid] :: IVar -> Id
[ivpos] :: IVar -> Int
[ivstat] :: IVar -> Int
[ivsrt] :: IVar -> SortId
type IWals = WEnv IVar

-- | An element of the form (offers, hiddenVars, valexp)
--   
--   Example offers G ? x | H ? y ~ Set { G ? x , H ? y }
--   
--   valexp: = value expression over interaction variables. interaction
--   variables must come from the hidden variables or offers.
type Menu = [(Set CTOffer, [IVar], ValExpr IVar)]
instance GHC.Show.Show BTree.CTBranch
instance GHC.Read.Read BTree.CTBranch
instance GHC.Classes.Ord BTree.CTBranch
instance GHC.Classes.Eq BTree.CTBranch
instance GHC.Show.Show BTree.BBranch
instance GHC.Read.Read BTree.BBranch
instance GHC.Classes.Ord BTree.BBranch
instance GHC.Classes.Eq BTree.BBranch
instance GHC.Base.Functor BTree.BNode
instance GHC.Show.Show env => GHC.Show.Show (BTree.BNode env)
instance GHC.Read.Read env => GHC.Read.Read (BTree.BNode env)
instance GHC.Classes.Ord env => GHC.Classes.Ord (BTree.BNode env)
instance GHC.Classes.Eq env => GHC.Classes.Eq (BTree.BNode env)
instance GHC.Show.Show BTree.CTOffer
instance GHC.Read.Read BTree.CTOffer
instance GHC.Classes.Ord BTree.CTOffer
instance GHC.Classes.Eq BTree.CTOffer
instance GHC.Show.Show BTree.IVar
instance GHC.Read.Read BTree.IVar
instance GHC.Classes.Ord BTree.IVar
instance GHC.Classes.Eq BTree.IVar
instance Variable.Variable BTree.IVar

module BTShow
instance TxsShow.PShow BTree.IVar
instance TxsShow.PShow BTree.CNode
instance TxsShow.PShow BTree.INode
instance TxsShow.PShow BTree.CTBranch
instance TxsShow.PShow BTree.BBranch
instance TxsShow.PShow BTree.CTOffer
