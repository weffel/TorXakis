-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Definitions for TorXakis
--   
--   Definitions for TorXakis
@package defs
@version 0.2.1.0

module ChanId
data ChanId
ChanId :: Name -> Id -> [SortId] -> ChanId
[name] :: ChanId -> Name
[unid] :: ChanId -> Id
[chansorts] :: ChanId -> [SortId]
instance Data.Data.Data ChanId.ChanId
instance Control.DeepSeq.NFData ChanId.ChanId
instance GHC.Generics.Generic ChanId.ChanId
instance GHC.Show.Show ChanId.ChanId
instance GHC.Read.Read ChanId.ChanId
instance GHC.Classes.Ord ChanId.ChanId
instance GHC.Classes.Eq ChanId.ChanId
instance Id.Resettable ChanId.ChanId
instance Id.Identifiable ChanId.ChanId

module CnectId
data CnectId
CnectId :: Name -> Id -> CnectId
[name] :: CnectId -> Name
[unid] :: CnectId -> Id
instance Control.DeepSeq.NFData CnectId.CnectId
instance GHC.Generics.Generic CnectId.CnectId
instance GHC.Show.Show CnectId.CnectId
instance GHC.Read.Read CnectId.CnectId
instance GHC.Classes.Ord CnectId.CnectId
instance GHC.Classes.Eq CnectId.CnectId
instance Id.Resettable CnectId.CnectId
instance Id.Identifiable CnectId.CnectId


-- | This module introduces the context of Sort (collection of all
--   definitions).
module FuncTable
data Signature
Signature :: [SortId] -> SortId -> Signature
[sortArgs] :: Signature -> [SortId]
[sortRet] :: Signature -> SortId
type SignHandler v = Map Signature (Handler v)
type Handler v = [ValExpr v] -> ValExpr v

-- | Data structure for Function-like Name and Signature to Handler
newtype FuncTable v
FuncTable :: Map Text (SignHandler v) -> FuncTable v
[toMap] :: FuncTable v -> Map Text (SignHandler v)

-- | empty
empty :: FuncTable v

-- | Insert a new name, signature and handler in the table. If the name and
--   signature pair is already present in the table, the associated handler
--   is replaced with the supplied handler.
insert :: Text -> Signature -> Handler v -> FuncTable v -> FuncTable v

-- | The expression (<tt><a>union</a> t1 t2</tt>) takes the left-biased
--   union of <tt>t1</tt> and <tt>t2</tt>. It prefers <tt>t1</tt> when
--   duplicate name and signature pairs are encountered.
union :: FuncTable v -> FuncTable v -> FuncTable v

-- | All names of the table
names :: FuncTable v -> [Text]

-- | Is the name and signature pair a member of the table?
member :: Text -> Signature -> FuncTable v -> Bool

-- | Get all signatures associated with the given name in the table.
signatures :: Text -> FuncTable v -> [Signature]

-- | Get signHandler associated with the given name in the table.
signHandler :: Text -> FuncTable v -> SignHandler v
instance Control.DeepSeq.NFData (FuncTable.FuncTable v)
instance GHC.Generics.Generic (FuncTable.FuncTable v)
instance Control.DeepSeq.NFData FuncTable.Signature
instance GHC.Generics.Generic FuncTable.Signature
instance GHC.Show.Show FuncTable.Signature
instance GHC.Read.Read FuncTable.Signature
instance GHC.Classes.Ord FuncTable.Signature
instance GHC.Classes.Eq FuncTable.Signature
instance GHC.Show.Show (FuncTable.FuncTable v)

module GoalId
data GoalId
GoalId :: Name -> Id -> GoalId
[name] :: GoalId -> Name
[unid] :: GoalId -> Id
instance Control.DeepSeq.NFData GoalId.GoalId
instance GHC.Generics.Generic GoalId.GoalId
instance GHC.Show.Show GoalId.GoalId
instance GHC.Read.Read GoalId.GoalId
instance GHC.Classes.Ord GoalId.GoalId
instance GHC.Classes.Eq GoalId.GoalId
instance Id.Resettable GoalId.GoalId
instance Id.Identifiable GoalId.GoalId

module MapperId
data MapperId
MapperId :: Name -> Id -> MapperId
[name] :: MapperId -> Name
[unid] :: MapperId -> Id
instance Control.DeepSeq.NFData MapperId.MapperId
instance GHC.Generics.Generic MapperId.MapperId
instance GHC.Show.Show MapperId.MapperId
instance GHC.Read.Read MapperId.MapperId
instance GHC.Classes.Ord MapperId.MapperId
instance GHC.Classes.Eq MapperId.MapperId
instance Id.Resettable MapperId.MapperId
instance Id.Identifiable MapperId.MapperId

module ModelId
data ModelId
ModelId :: Name -> Id -> ModelId
[name] :: ModelId -> Name
[unid] :: ModelId -> Id
instance Control.DeepSeq.NFData ModelId.ModelId
instance GHC.Generics.Generic ModelId.ModelId
instance GHC.Show.Show ModelId.ModelId
instance GHC.Read.Read ModelId.ModelId
instance GHC.Classes.Ord ModelId.ModelId
instance GHC.Classes.Eq ModelId.ModelId
instance Id.Resettable ModelId.ModelId
instance Id.Identifiable ModelId.ModelId

module ProcId
data ExitSort
NoExit :: ExitSort
Exit :: [SortId] -> ExitSort
Hit :: ExitSort
data ProcId
ProcId :: Name -> Id -> [ChanId] -> [VarId] -> ExitSort -> ProcId
[name] :: ProcId -> Name
[unid] :: ProcId -> Id
[procchans] :: ProcId -> [ChanId]
[procvars] :: ProcId -> [VarId]
[procexit] :: ProcId -> ExitSort
instance Data.Data.Data ProcId.ProcId
instance Control.DeepSeq.NFData ProcId.ProcId
instance GHC.Generics.Generic ProcId.ProcId
instance GHC.Show.Show ProcId.ProcId
instance GHC.Read.Read ProcId.ProcId
instance GHC.Classes.Ord ProcId.ProcId
instance GHC.Classes.Eq ProcId.ProcId
instance Data.Data.Data ProcId.ExitSort
instance Control.DeepSeq.NFData ProcId.ExitSort
instance GHC.Generics.Generic ProcId.ExitSort
instance GHC.Show.Show ProcId.ExitSort
instance GHC.Read.Read ProcId.ExitSort
instance GHC.Classes.Ord ProcId.ExitSort
instance GHC.Classes.Eq ProcId.ExitSort
instance Id.Resettable ProcId.ProcId
instance Id.Identifiable ProcId.ProcId
instance Id.Resettable ProcId.ExitSort
instance Id.Identifiable ProcId.ExitSort

module PurpId
data PurpId
PurpId :: Name -> Id -> PurpId
[name] :: PurpId -> Name
[unid] :: PurpId -> Id
instance Control.DeepSeq.NFData PurpId.PurpId
instance GHC.Generics.Generic PurpId.PurpId
instance GHC.Show.Show PurpId.PurpId
instance GHC.Read.Read PurpId.PurpId
instance GHC.Classes.Ord PurpId.PurpId
instance GHC.Classes.Eq PurpId.PurpId
instance Id.Resettable PurpId.PurpId
instance Id.Identifiable PurpId.PurpId


-- | This module introduces the cartesian product of Sigs for the
--   TxsParser.
module Sigs
data Sigs v
Sigs :: [ChanId] -> FuncTable v -> [ProcId] -> Map Text SortId -> Sigs v
[chan] :: Sigs v -> [ChanId]
[func] :: Sigs v -> FuncTable v
[pro] :: Sigs v -> [ProcId]
[sort] :: Sigs v -> Map Text SortId
empty :: Sigs v
combine :: Sigs v -> Sigs v -> Sigs v
uniqueCombine :: Sigs v -> Sigs v -> Sigs v
instance Control.DeepSeq.NFData (Sigs.Sigs v)
instance GHC.Generics.Generic (Sigs.Sigs v)
instance GHC.Show.Show (Sigs.Sigs v)

module StatId
data StatId
StatId :: Name -> Id -> ProcId -> StatId
[name] :: StatId -> Name
[unid] :: StatId -> Id
[procid] :: StatId -> ProcId
instance Data.Data.Data StatId.StatId
instance Control.DeepSeq.NFData StatId.StatId
instance GHC.Generics.Generic StatId.StatId
instance GHC.Show.Show StatId.StatId
instance GHC.Read.Read StatId.StatId
instance GHC.Classes.Ord StatId.StatId
instance GHC.Classes.Eq StatId.StatId
instance Id.Resettable StatId.StatId
instance Id.Identifiable StatId.StatId

module Utils
(\\\) :: (Eq t) => [t] -> [t] -> [t]
liftP2 :: Monad m => (a, m b) -> m (a, b)
liftP3 :: Monad m => (a, b, m c) -> m (a, b, c)
intersections :: Ord a => [Set a] -> Set a
frst :: (a, b, c) -> a
scnd :: (a, b, c) -> b
thrd :: (a, b, c) -> c


-- | This module introduces definitions related to behaviour expressions.
module BehExprDefs

-- | BExprView: the public view of Behaviour Expression <a>BExpr</a>
data BExprView
Stop :: BExprView
ActionPref :: ActOffer -> BExpr -> BExprView
Guard :: VExpr -> BExpr -> BExprView
Choice :: [BExpr] -> BExprView
Parallel :: [ChanId] -> [BExpr] -> BExprView
Enable :: BExpr -> [ChanOffer] -> BExpr -> BExprView
Disable :: BExpr -> BExpr -> BExprView
Interrupt :: BExpr -> BExpr -> BExprView
ProcInst :: ProcId -> [ChanId] -> [VExpr] -> BExprView
Hide :: [ChanId] -> BExpr -> BExprView
ValueEnv :: VEnv -> BExpr -> BExprView
StAut :: StatId -> VEnv -> [Trans] -> BExprView

-- | BExpr: behaviour expression
--   
--   <ol>
--   <li>User can't directly construct BExpr (such that invariants will
--   always hold)</li>
--   <li>User can still pattern match on BExpr using <a>BExprView</a></li>
--   <li>Overhead at run-time is zero. See
--   <a>https://wiki.haskell.org/Performance/Data_types#Newtypes</a></li>
--   </ol>
data BExpr

-- | View on Behaviour Expression
view :: BExpr -> BExprView

-- | ActOffer Offer on multiple channels with constraints
data ActOffer
ActOffer :: Set Offer -> Set VarId -> VExpr -> ActOffer
[offers] :: ActOffer -> Set Offer
[hiddenvars] :: ActOffer -> Set VarId
[constraint] :: ActOffer -> VExpr

-- | Offer Offer on a single channel (with multiple values)
data Offer
Offer :: ChanId -> [ChanOffer] -> Offer
[chanid] :: Offer -> ChanId
[chanoffers] :: Offer -> [ChanOffer]

-- | Channel Offer Offer of a single value
data ChanOffer
Quest :: VarId -> ChanOffer
Exclam :: VExpr -> ChanOffer

-- | symbolic transitions
data Trans
Trans :: StatId -> ActOffer -> VEnv -> StatId -> Trans
[from] :: Trans -> StatId
[actoffer] :: Trans -> ActOffer
[update] :: Trans -> VEnv
[to] :: Trans -> StatId

-- | Equality modulo unique id's. Compare two behavior expressions for
--   equality ignoring the differences in identifiers.
(~~) :: BExpr -> BExpr -> Bool
stop :: BExpr
actionPref :: ActOffer -> BExpr -> BExpr
guard :: VExpr -> BExpr -> BExpr
choice :: [BExpr] -> BExpr
parallel :: [ChanId] -> [BExpr] -> BExpr
enable :: BExpr -> [ChanOffer] -> BExpr -> BExpr
disable :: BExpr -> BExpr -> BExpr
interrupt :: BExpr -> BExpr -> BExpr
procInst :: ProcId -> [ChanId] -> [VExpr] -> BExpr
hide :: [ChanId] -> BExpr -> BExpr
valueEnv :: VEnv -> BExpr -> BExpr
stAut :: StatId -> VEnv -> [Trans] -> BExpr
instance Data.Data.Data BehExprDefs.BExpr
instance Control.DeepSeq.NFData BehExprDefs.BExpr
instance GHC.Generics.Generic BehExprDefs.BExpr
instance GHC.Show.Show BehExprDefs.BExpr
instance GHC.Read.Read BehExprDefs.BExpr
instance GHC.Classes.Ord BehExprDefs.BExpr
instance GHC.Classes.Eq BehExprDefs.BExpr
instance Data.Data.Data BehExprDefs.BExprView
instance Control.DeepSeq.NFData BehExprDefs.BExprView
instance GHC.Generics.Generic BehExprDefs.BExprView
instance GHC.Show.Show BehExprDefs.BExprView
instance GHC.Read.Read BehExprDefs.BExprView
instance GHC.Classes.Ord BehExprDefs.BExprView
instance GHC.Classes.Eq BehExprDefs.BExprView
instance Data.Data.Data BehExprDefs.Trans
instance Control.DeepSeq.NFData BehExprDefs.Trans
instance GHC.Generics.Generic BehExprDefs.Trans
instance GHC.Show.Show BehExprDefs.Trans
instance GHC.Read.Read BehExprDefs.Trans
instance GHC.Classes.Ord BehExprDefs.Trans
instance GHC.Classes.Eq BehExprDefs.Trans
instance Data.Data.Data BehExprDefs.ActOffer
instance Control.DeepSeq.NFData BehExprDefs.ActOffer
instance GHC.Generics.Generic BehExprDefs.ActOffer
instance GHC.Show.Show BehExprDefs.ActOffer
instance GHC.Read.Read BehExprDefs.ActOffer
instance GHC.Classes.Ord BehExprDefs.ActOffer
instance GHC.Classes.Eq BehExprDefs.ActOffer
instance Data.Data.Data BehExprDefs.Offer
instance Control.DeepSeq.NFData BehExprDefs.Offer
instance GHC.Generics.Generic BehExprDefs.Offer
instance GHC.Show.Show BehExprDefs.Offer
instance GHC.Read.Read BehExprDefs.Offer
instance GHC.Classes.Ord BehExprDefs.Offer
instance GHC.Classes.Eq BehExprDefs.Offer
instance Data.Data.Data BehExprDefs.ChanOffer
instance Control.DeepSeq.NFData BehExprDefs.ChanOffer
instance GHC.Generics.Generic BehExprDefs.ChanOffer
instance GHC.Show.Show BehExprDefs.ChanOffer
instance GHC.Read.Read BehExprDefs.ChanOffer
instance GHC.Classes.Ord BehExprDefs.ChanOffer
instance GHC.Classes.Eq BehExprDefs.ChanOffer
instance Id.Resettable BehExprDefs.BExprView
instance Id.Resettable BehExprDefs.BExpr
instance Id.Resettable BehExprDefs.Trans
instance Id.Resettable BehExprDefs.ActOffer
instance Id.Resettable BehExprDefs.Offer
instance Id.Resettable BehExprDefs.ChanOffer
instance SortOf.SortOf BehExprDefs.ChanOffer

module TxsDefs
data TxsDefs
TxsDefs :: Map SortId SortDef -> Map CstrId CstrDef -> Map FuncId (FuncDef VarId) -> Map ProcId ProcDef -> Map ChanId () -> Map VarId () -> Map StatId () -> Map ModelId ModelDef -> Map PurpId PurpDef -> Map GoalId () -> Map MapperId MapperDef -> Map CnectId CnectDef -> TxsDefs
[sortDefs] :: TxsDefs -> Map SortId SortDef
[cstrDefs] :: TxsDefs -> Map CstrId CstrDef
[funcDefs] :: TxsDefs -> Map FuncId (FuncDef VarId)
[procDefs] :: TxsDefs -> Map ProcId ProcDef
[chanDefs] :: TxsDefs -> Map ChanId ()
[varDefs] :: TxsDefs -> Map VarId ()
[statDefs] :: TxsDefs -> Map StatId ()
[modelDefs] :: TxsDefs -> Map ModelId ModelDef
[purpDefs] :: TxsDefs -> Map PurpId PurpDef
[goalDefs] :: TxsDefs -> Map GoalId ()
[mapperDefs] :: TxsDefs -> Map MapperId MapperDef
[cnectDefs] :: TxsDefs -> Map CnectId CnectDef
empty :: TxsDefs
fromList :: [(Ident, TxsDef)] -> TxsDefs
toList :: TxsDefs -> [(Ident, TxsDef)]
lookup :: Ident -> TxsDefs -> Maybe TxsDef
keys :: TxsDefs -> [Ident]
elems :: TxsDefs -> [TxsDef]
union :: TxsDefs -> TxsDefs -> TxsDefs
insert :: Ident -> TxsDef -> TxsDefs -> TxsDefs
data TxsDef
DefSort :: SortDef -> TxsDef
DefCstr :: CstrDef -> TxsDef
DefFunc :: (FuncDef VarId) -> TxsDef
DefProc :: ProcDef -> TxsDef
DefModel :: ModelDef -> TxsDef
DefPurp :: PurpDef -> TxsDef
DefMapper :: MapperDef -> TxsDef
DefCnect :: CnectDef -> TxsDef
DefChan :: TxsDef
DefVar :: TxsDef
DefStat :: TxsDef
DefGoal :: TxsDef
type VarEnv v w = Map v (ValExpr w)
type VExpr = ValExpr VarId
type VEnv = VarEnv VarId VarId
type WEnv v = Map v Const
data ProcDef
ProcDef :: [ChanId] -> [VarId] -> BExpr -> ProcDef
data ProcId
ProcId :: Name -> Id -> [ChanId] -> [VarId] -> ExitSort -> ProcId
data ChanId
ChanId :: Name -> Id -> [SortId] -> ChanId
data StatId
StatId :: Name -> Id -> ProcId -> StatId
data ModelDef
ModelDef :: [Set ChanId] -> [Set ChanId] -> [Set ChanId] -> BExpr -> ModelDef
data ModelId
ModelId :: Name -> Id -> ModelId
data PurpDef
PurpDef :: [Set ChanId] -> [Set ChanId] -> [Set ChanId] -> [(GoalId, BExpr)] -> PurpDef
data PurpId
PurpId :: Name -> Id -> PurpId
data GoalId
GoalId :: Name -> Id -> GoalId

-- | A mapper maps actions to actions.
--   
--   For instance, the process:
--   
--   <pre>
--   Plus ? x ? y &gt;-&gt;  Sin ! "Plus" ! x ! y ||  Min ? x ? y &gt;-&gt;  Sin ! "Minus" ! x ! y ||
--   </pre>
--   
--   defines a mapper rule that maps <tt>Plus</tt> and <tt>Min</tt>
--   channels to <tt>Sin</tt>.
--   
--   See `examps/Adder/MAdder.txs` for more details.
data MapperDef
MapperDef :: [ChanId] -> [ChanId] -> [Set ChanId] -> BExpr -> MapperDef
data MapperId
MapperId :: Name -> Id -> MapperId
data CnectDef
CnectDef :: CnectType -> [ConnDef] -> CnectDef
data CnectId
CnectId :: Name -> Id -> CnectId
data ExitSort
NoExit :: ExitSort
Exit :: [SortId] -> ExitSort
Hit :: ExitSort
instance Control.DeepSeq.NFData TxsDefs.TxsDefs
instance GHC.Generics.Generic TxsDefs.TxsDefs
instance GHC.Show.Show TxsDefs.TxsDefs
instance GHC.Read.Read TxsDefs.TxsDefs
instance GHC.Classes.Ord TxsDefs.TxsDefs
instance GHC.Classes.Eq TxsDefs.TxsDefs


-- | Predefined, Standard TorXakis Data Types : Bool, Int, Char, String.
module StdTDefs
eqName :: Text
neqName :: Text
toStringName :: Text
fromStringName :: Text
toXmlName :: Text
fromXmlName :: Text
funcIdBoolToString :: FuncId
funcIdBoolFromString :: FuncId
funcIdBoolToXml :: FuncId
funcIdBoolFromXml :: FuncId
funcIdIntToString :: FuncId
funcIdIntFromString :: FuncId
funcIdIntToXml :: FuncId
funcIdIntFromXml :: FuncId
funcIdStringToString :: FuncId
funcIdStringFromString :: FuncId
funcIdStringToXml :: FuncId
funcIdStringFromXml :: FuncId
funcIdtakeWhile :: FuncId
funcIdtakeWhileNot :: FuncId
funcIddropWhile :: FuncId
funcIddropWhileNot :: FuncId
equalHandler :: Ord v => Handler v
notEqualHandler :: Ord v => Handler v
cstrHandler :: CstrId -> Handler v
iscstrHandler :: CstrId -> Handler v
accessHandler :: CstrId -> Int -> Handler v
stdSortTable :: Map Text SortId
stdFuncTable :: (Ord v, Integral (ValExpr v)) => FuncTable v
stdTDefs :: [(Ident, TxsDef)]
chanIdExit :: ChanId
chanIdIstep :: ChanId
chanIdQstep :: ChanId
chanIdHit :: ChanId
chanIdMiss :: ChanId

module TxsUtils
sig :: Ident -> Ident
doubles :: Eq a => [a] -> [a]
bindOnName :: Name -> [Ident] -> [Ident]
bindOnSig :: Ident -> [Ident] -> [Ident]
bindOnUnid :: Int -> [Ident] -> [Ident]
scopeMerge :: [Ident] -> [Ident] -> [Ident]
combineWEnv :: (Variable v) => WEnv v -> WEnv v -> WEnv v
checkENDECdefs :: TxsDefs -> [FuncId]
checkENDECdef :: TxsDefs -> TxsDef -> Set FuncId
baseENDECfuncs :: TxsDefs -> Set FuncId
allENDECfuncs :: TxsDefs -> Set FuncId
funcCallsClosure :: TxsDefs -> Set FuncId -> Set FuncId
funcCalls :: TxsDefs -> FuncId -> Set FuncId
class UsedFids t
usedFids :: UsedFids t => t -> [FuncId]
instance TxsUtils.UsedFids BehExprDefs.BExpr
instance TxsUtils.UsedFids BehExprDefs.BExprView
instance TxsUtils.UsedFids BehExprDefs.Trans
instance TxsUtils.UsedFids BehExprDefs.ActOffer
instance TxsUtils.UsedFids BehExprDefs.ChanOffer
instance TxsUtils.UsedFids VarEnv.VExpr
instance TxsUtils.UsedFids (ValExprDefs.ValExprView VarId.VarId)
instance TxsUtils.UsedFids t => TxsUtils.UsedFids [t]

module TxsShow
specialOpChars :: String
class (Show t) => PShow t
pshow :: PShow t => t -> String
fshow :: PShow t => t -> String
isSpecialOp :: FuncId -> Bool
showN :: Int -> Int -> String
instance TxsShow.PShow TxsDefs.TxsDefs
instance TxsShow.PShow BehExprDefs.BExpr
instance TxsShow.PShow BehExprDefs.BExprView
instance TxsShow.PShow BehExprDefs.ActOffer
instance TxsShow.PShow BehExprDefs.Offer
instance TxsShow.PShow BehExprDefs.ChanOffer
instance TxsShow.PShow v => TxsShow.PShow (ValExprDefs.ValExpr v)
instance TxsShow.PShow v => TxsShow.PShow (ValExprDefs.ValExprView v)
instance TxsShow.PShow ConstDefs.Const
instance (TxsShow.PShow v, TxsShow.PShow w) => TxsShow.PShow (VarEnv.VarEnv v w)
instance TxsShow.PShow BehExprDefs.Trans
instance TxsShow.PShow TxsDef.TxsDef
instance TxsShow.PShow Ident.Ident
instance TxsShow.PShow ChanId.ChanId
instance TxsShow.PShow CstrId.CstrId
instance TxsShow.PShow FuncId.FuncId
instance TxsShow.PShow GoalId.GoalId
instance TxsShow.PShow ProcId.ProcId
instance TxsShow.PShow PurpId.PurpId
instance TxsShow.PShow SortId.SortId
instance TxsShow.PShow StatId.StatId
instance TxsShow.PShow VarId.VarId
instance TxsShow.PShow ModelId.ModelId
instance TxsShow.PShow MapperId.MapperId
instance TxsShow.PShow CnectId.CnectId
instance TxsShow.PShow ConnectionDefs.ConnDef
instance TxsShow.PShow ConnectionDefs.CnectType
instance (TxsShow.PShow t, TxsShow.PShow u) => TxsShow.PShow (t, u)
instance (TxsShow.PShow t, TxsShow.PShow u, TxsShow.PShow v) => TxsShow.PShow (t, u, v)
instance TxsShow.PShow t => TxsShow.PShow [t]
instance TxsShow.PShow t => TxsShow.PShow (Data.Set.Internal.Set t)
instance TxsShow.PShow t => TxsShow.PShow (GHC.Base.Maybe t)
instance (TxsShow.PShow t, TxsShow.PShow u) => TxsShow.PShow (Data.Either.Either t u)
instance TxsShow.PShow a => TxsShow.PShow (Sum.SumTerm a)
instance TxsShow.PShow a => TxsShow.PShow (Product.ProductTerm a)
instance TxsShow.PShow GHC.Types.Bool
instance TxsShow.PShow GHC.Types.Int

module TxsDDefs
data Action
Act :: (Set (ChanId, [Const])) -> Action
ActQui :: Action
data SAction
SAct :: Connection -> Text -> SAction
SActQui :: SAction
data ConnHandle
ConnHtoW :: ChanId -> Connection -> [VarId] -> VExpr -> ConnHandle
[chan] :: ConnHandle -> ChanId

-- | Connection to world
[connection] :: ConnHandle -> Connection

-- | Encoding domain
[vars] :: ConnHandle -> [VarId]

-- | Encoding range of String
[vexpr] :: ConnHandle -> VExpr
ConnHfroW :: ChanId -> Connection -> VarId -> [VExpr] -> ConnHandle
[chan] :: ConnHandle -> ChanId

-- | Connection to world
[connection] :: ConnHandle -> Connection

-- | Decoding domain of String
[var] :: ConnHandle -> VarId

-- | Decoding range
[vexprs] :: ConnHandle -> [VExpr]
data Verdict
Pass :: Verdict
Fail :: Action -> Verdict
NoVerdict :: Verdict
data PurpVerdict
PurpHit :: PurpVerdict
PurpMiss :: PurpVerdict
PurpHalted :: PurpVerdict
instance GHC.Show.Show TxsDDefs.PurpVerdict
instance GHC.Read.Read TxsDDefs.PurpVerdict
instance GHC.Classes.Ord TxsDDefs.PurpVerdict
instance GHC.Classes.Eq TxsDDefs.PurpVerdict
instance GHC.Show.Show TxsDDefs.Verdict
instance GHC.Read.Read TxsDDefs.Verdict
instance GHC.Classes.Ord TxsDDefs.Verdict
instance GHC.Classes.Eq TxsDDefs.Verdict
instance GHC.Show.Show TxsDDefs.ConnHandle
instance GHC.Classes.Eq TxsDDefs.ConnHandle
instance GHC.Show.Show TxsDDefs.SAction
instance GHC.Classes.Eq TxsDDefs.SAction
instance GHC.Show.Show TxsDDefs.Action
instance GHC.Read.Read TxsDDefs.Action
instance GHC.Classes.Ord TxsDDefs.Action
instance GHC.Classes.Eq TxsDDefs.Action
instance TxsShow.PShow TxsDDefs.PurpVerdict
instance TxsShow.PShow TxsDDefs.Verdict
instance TxsShow.PShow TxsDDefs.ConnHandle
instance TxsShow.PShow TxsDDefs.SAction
instance TxsShow.PShow TxsDDefs.Action

module XmlFormat
constToXml :: TxsDefs -> Const -> Text
constFromXml :: TxsDefs -> SortId -> Text -> Const
instance Data.String.IsString XmlFormat.XMLTree
